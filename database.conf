# configuration file for auditlog2db
#
# syntax for the file is the following fields, separated by any amount of whitespace:
# value_name        section     regex (double escaped backslashes)
#
# value_name will be used in the name of the data table, and also in any error messages
# related to the processing of this field
#
# sections are:
# A - audit log header
# B - request headers
# C - request body
# D - intended response header (not yet implemented in modsecurity)
# E - intended response body
# F - response headers
# G - response body
# H - audit log trailer
# I - reduced multipart request body
# J - multipart files information
# K - matched rules
# Z - audit log footer (no data)
#
# "regex" is a perl compatible regular expression with double-escaped backslashes.
# The regex must contain one, and only one, set of brackets for extracting data in the match. 
# Each regex is tested against the entire string for the relevant header, using
# QRegularExpression::MultilineOption (so ^ matches the start of a line and $ matches the
# end of a line within the string.

# SECTION B - REQUEST HEADERS
# note: the following line is hard coded in the program
# ^(\\w+)\\s(.*)\\s(HTTP\\/\\d\\.\\d)$
# 1st match is request method, 2nd match is URI, 3rd match is HTTP version

host                B           ^Host:\\s*(.*?)$
connection          B           ^Connection:\\s*(.*?)$
accept              B           ^Accept:\\s*(.*?)$
useragent           B           ^User-Agent:\\s*(.*?)$
DNT                 B           ^DNT:\\s*(.*?)$
referrer            B           ^Referer:\\s*(.*?)$
accept_encoding     B           ^Accept-Encoding:\\s*(.*?)$
accept_language     B           ^Accept-Language:\\s*(.*?)$
cookie              B           ^Cookie:\\s*(.*?)$
x_requested_with    B           ^X-Requested-With:\\s*(.*?)$
content_type        B           ^Content-Type:\\s*(.*?)$
content_length      B           ^Content-Length:\\s*(.*?)$
proxy_connection    B           ^Proxy-Connection:\\s*(.*?)$
accept_charset      B           ^Accept-Charset:\\s*(.*?)$
UA_CPU              B           ^UA-CPU:\\s*(.*?)$
x_forwarded_for     B           ^X-Forwarded-For:\\s*(.*?)$
cache_control       B           ^Cache-Control:\\s*(.*?)$
via                 B           ^Via:\\s*(.*?)$
if_modified_since   B           ^If-Modified-Since:\\s*(.*?)$
if_none_match       B           ^If-None-Match:\\s*(.*?)$
pragma              B           ^Pragma:\\s*(.*?)$






# SECTION F - RESPONSE HEADERS
# note: the following regex is hard coded in the program, since it is always present
# ^(HTTP\\/\\d\\.\\d)\\s(\\d+)\\s(.*?)$ 
# 1st match is HTTP version, 2nd match is HTTP code, 3rd match is HTTP code description

x_powered_by        F           ^X-Powered-By:\\s*(.*?)$
expires             F           ^Expires:\\s*(.*?)$
cache_control       F           ^Cache-Control:\\s*(.*?)$
pragma              F           ^Pragma:\\s*(.*?)$
vary                F           ^Vary:\\s*(.*?)$
content_encoding    F           ^Content-Encoding:\\s*(.*?)$
content_length      F           ^Content-Length:\\s*(.*?)$
connection          F           ^Connection:\\s*(.*?)$
content_type        F           ^Content-Type:\\s*(.*?)$
status              F           ^Status:\\s*(.*?)$
keep_alive          F           ^Keep-Alive:\\s*(.*?)$
